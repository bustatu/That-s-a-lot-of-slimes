<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_plr_walk_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

//Arrow keys
key_up = vk_up
key_down = vk_down
key_left = vk_left
key_right = vk_right
key_attack = vk_space

//Gamepad keys
gp_attack = gp_face1

//Alternatives
ord_up = ord('W')
ord_down = ord('S')
ord_left = ord('A')
ord_right = ord('D')
ord_attack = vk_space

//Get image scale
img_xscale = image_xscale

//Gamepad deadzone
gamepad_set_axis_deadzone(0, 0.1);

//Facing
facing = 0

//Proprieties
move_speed = 10;
anim_speed = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step

//Check how much did he move on each axis
if(gamepad_is_connected(0))
{
    axis_x = gamepad_axis_value(0, gp_axislh)
    axis_y = gamepad_axis_value(0, gp_axislv)
    axis_attack = gamepad_button_check(0, gp_attack)
}
else 
{
    axis_x = (keyboard_check(ord_right) || keyboard_check(key_right)) - (keyboard_check(ord_left) || keyboard_check(key_left))
    axis_y = (keyboard_check(ord_down) || keyboard_check(key_down)) - (keyboard_check(ord_up) || keyboard_check(key_up))
    axis_attack = (keyboard_check(key_attack) || keyboard_check(ord_attack))
}


//IF moved
if(axis_x != 0 || axis_y != 0)
{
    //New coordonates
    nx = x + lengthdir_x(1, point_direction(0, 0, axis_x, axis_y)) * move_speed * adelta_time
    ny = y + lengthdir_y(1, point_direction(0, 0, axis_x, axis_y)) * move_speed * adelta_time
    
    
    //If not attacking and place is free
    if(!axis_attack)
    {
        //If gamepad
        if(gamepad_is_connected(0))
        {
            //Update cursor coordonates
            obj_cursor.x += nx - x
            obj_cursor.y += ny - y
        }
        
        //Update coordonates
        x = nx
        y = ny
    }

    
    //Update animation
    if(axis_x &gt; 0)
    {
        //If not attacking
        if(!axis_attack)
        {
            sprite_index = spr_plr_walk_side
        }
        else 
        {
            sprite_index = spr_plr_attack_side
        }
        image_xscale = -img_xscale
        facing = 3
    }
    else if(axis_x &lt; 0)
    {
        //If not attacking
        if(!axis_attack)
        {
            sprite_index = spr_plr_walk_side
        }
        else 
        {
            sprite_index = spr_plr_attack_side
        }
        image_xscale = img_xscale
        facing = 2
    }
    else if(axis_y &lt; 0)
    {
        //If not attacking
        if(!axis_attack)
        {
            sprite_index = spr_plr_walk_up
        }
        else 
        {
            sprite_index = spr_plr_attack_up
        }
        facing = 0
    }
    else if(axis_y &gt; 0)
    {
        //If not attacking
        if(!axis_attack)
        {
            sprite_index = spr_plr_walk_down
        }
        else 
        {
            sprite_index = spr_plr_attack_down
        }
        facing = 1
    }
    
    //Update animation speed
    image_speed = anim_speed * adelta_time;
}
//Idle
else 
{
    //If not attacking
    if(!axis_attack)
    {
        //Set facing and image index if not attacking
        image_speed = 0
        image_index = facing
        if(facing == 3)
        {
            image_xscale = -img_xscale
            image_index = 2
        }
        else if(facing == 2)
        {
            image_xscale = img_xscale
            image_index = 2
        }
        //Idle
        sprite_index = spr_plr_idle
    }
    else 
    {
        switch(facing)
        {
            case 0:
            {
                sprite_index = spr_plr_attack_up
                break
            }
            case 1:
            {
                sprite_index = spr_plr_attack_down
                break
            }
            case 2:
            {
                image_xscale = img_xscale
                sprite_index = spr_plr_attack_side
                break
            }
            case 3:
            {
                image_xscale = -img_xscale
                sprite_index = spr_plr_attack_side
                break
            }
        }
        
        //Update animation speed
        image_speed = anim_speed * adelta_time;
    }
}

//Set player in the centre of the view
view_xview[0] = x - view_wview[0] / 2
view_yview[0] = y - view_hview[0] / 2
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
